name: Build OneAPI Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of llama-cpp-python to build: v0.2.35'
        default: 'v0.2.35'
        required: true
        type: string
      config:
        description: 'Override configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'None'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version tag of llama-cpp-python to build: v0.2.35'
        default: 'v0.2.35'
        required: true
        type: string
      config:
        description: 'Configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'Default'
        required: false
        type: string

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh
    env:
      CONFIGIN: ${{ inputs.config }}
      EXCLUDEIN: ${{ inputs.exclude }}
        
    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = "ubuntu-22.04", "windows-latest"
              'pyver' = "3.10", "3.11"
              'oneapi' = "2024.0", "2024.1" # 2024.0 is the minimal working version
              'releasetag' = @("basic") <#, "AVX", "wheels", "AVX512" #>
              'exclude' = @(
                @{'os' = 'windows-latest'; 'oneapi' = '2024.0'}
              )
          }
          
          if ($env:CONFIGIN -ne 'Default') {$env:CONFIGIN.split(';').foreach({$matrix[$_.split(':')[0]] = $_.split(':')[1].split(',')})}
          
          if ($env:EXCLUDEIN -notin ('None','Default')) {
              $exclusions = $matrix['exclude']
              $exclusions += $env:EXCLUDEIN.split(';').replace(':','=').replace(',',"`n") | ConvertFrom-StringData
              $matrix['exclude'] = $exclusions
          } elseif ($env:EXCLUDEIN -eq 'None') {$matrix.remove('exclude')}
          
          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT
          
  build_wheels:
    name: Build Wheel ${{ matrix.os }} Python${{ matrix.pyver }} OneAPI${{ matrix.oneapi }} ${{ matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag }}
    needs: define_matrix
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    env:
      ONEAPIVER: ${{ matrix.oneapi }}
      AVXVER: ${{ matrix.releasetag }}
      PCKGVER: ${{ inputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'abetlen/llama-cpp-python'
          ref: ${{ inputs.version }}
          submodules: 'recursive'
          
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}

      - name: Install Linux OneAPI Base Toolkit
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y gpg-agent wget
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list

          sudo apt-get update
          sudo apt-get install -y intel-basekit-${ONEAPIVER}
      
      - name: Windows OneAPI Base Toolkit and w64devkit Cache
        id: oneapi-base-toolkit-cache
        if: runner.os == 'Windows'
        uses: actions/cache@v3.3.2
        with:
          path: |
            ./OneAPI_BaseKit.exe
            ./w64devkit.zip
          key: oneapi-base-toolkit-${{ matrix.oneapi }}

      - name: Fetch Windows OneAPI Base Toolkit and w64devkit
        if: runner.os == 'Windows' && steps.oneapi-base-toolkit-cache.outputs.cache-hit != 'true'
        run: |
          Invoke-RestMethod "https://registrationcenter-download.intel.com/akdlm/IRC_NAS/7dff44ba-e3af-4448-841c-0d616c8da6e7/w_BaseKit_p_2024.1.0.595_offline.exe" -OutFile "OneAPI_BaseKit.exe"
          Invoke-RestMethod "https://github.com/skeeto/w64devkit/releases/download/v1.22.0/w64devkit-1.22.0.zip" -OutFile 'w64devkit.zip'
      
      - name: Install Windows OneAPI Base Toolkit and w64devkit
        if: runner.os == 'Windows'
        run: |
          Start-Process "OneAPI_BaseKit.exe" -ArgumentList "-s -a --silent --eula accept -p=NEED_VS2019_INTEGRATION=0" -NoNewWindow -Wait
          Expand-Archive ./w64devkit.zip -DestinationPath C:\
          echo "C:\w64devkit\bin\" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Dependencies
        run: |
          python -m pip install build wheel
          
      - name: Prepare Wheel
        run: |
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
          $env:VERBOSE = '1'
          $env:CMAKE_ARGS = "-DLLAMA_SYCL=on "
          # $env:CMAKE_ARGS += "-DLLAMA_SYCL_F16=ON "
          
          if ($IsLinux) {
            $env:CMAKE_ARGS += "-DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icpx"
          } else {
            $env:CMAKE_ARGS += "-DCMAKE_C_COMPILER=icx -DCMAKE_CXX_COMPILER=icx"
          }
          if ($env:AVXVER -eq 'AVX') {$env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DLLAMA_AVX2=off -DLLAMA_FMA=off -DLLAMA_F16C=off'}
          if ($env:AVXVER -eq 'AVX512') {$env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DLLAMA_AVX512=on'}
          if ($env:AVXVER -eq 'basic') {$env:CMAKE_ARGS = $env:CMAKE_ARGS + ' -DLLAMA_AVX=off -DLLAMA_AVX2=off -DLLAMA_FMA=off -DLLAMA_F16C=off'}
          $buildtag = "+oneapi$env:ONEAPIVER"
          
          $initpath = Join-Path '.' 'llama_cpp' '__init__.py' -resolve
          $initcontent = Get-Content $initpath -raw
          $regexstr = '(?s)(?<=__version__ \= ")\d+(?:\.\d+)*(?=")'
          $regexmatch = [Regex]::Matches($initcontent,$regexstr)
          if (!($regexmatch[0].Success)) {throw '__init__.py parsing failed'}
          $newinit = $regexmatch[0].Result(('$`' + '$&' + $buildtag + '$'''))
          New-Item $initpath -itemType File -value $newinit -force
          
          echo "CMAKE_ARGS=$env:CMAKE_ARGS" >> "$env:GITHUB_ENV"
          echo "VERBOSE=$env:VERBOSE" >> "$env:GITHUB_ENV"

          echo $CMAKE_ARGS

      - name: Build Wheel for Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          source /opt/intel/oneapi/setvars.sh
          python -m build --wheel
      
      - name: Build Wheel for Windows
        if: runner.os == 'Windows'
        run: |
          Install-Module Pscx -Scope CurrentUser -Force -AllowClobber
          Invoke-BatchFile "C:\Program Files (x86)\Intel\oneAPI\setvars.bat" "intel64 --force"
          
          $env:CMAKE_GENERATOR = "MinGW Makefiles"
          python -m build --wheel
          
      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          file: ./dist/*.whl
          tag: oneapi
          file_glob: true
          make_latest: false
          overwrite: true
        
      - uses: actions/upload-artifact@v3
        if: steps.upload-release.outcome == 'failure'
        with:
          name: ${{ matrix.releasetag == 'wheels' && 'AVX2' || matrix.releasetag }}
          path: ./dist/*.whl